import cv from '@techstark/opencv-js';
import { writeFileSync } from "fs";
const { Canvas, createCanvas, Image, ImageData, loadImage, OffscreenCanvas } = require('canvas');
import sharp from "sharp";
import Tesseract from 'tesseract.js';
const { JSDOM } = require('jsdom');

installDOM();
function installDOM() {
    const dom = new JSDOM();
    global.document = dom.window.document;
    // The rest enables DOM image and canvas and is provided by node-canvas
    global.Image = Image;
    global.HTMLCanvasElement = Canvas as any;
    global.ImageData = ImageData;
    global.HTMLImageElement = Image;
    global.OffscreenCanvas = OffscreenCanvas;
}

async function processImage(imagePath) {
    try {

        console.log(cv.getBuildInformation())

        const image = await loadImage(imagePath);
        let src = cv.imread(image);
        let contours: any = new cv.MatVector();

        let grayscale = new cv.Mat();
        let edges = new cv.Mat();
        let dilated = new cv.Mat();
        let adaptiveThresh = new cv.Mat();
        let combined = new cv.Mat();
        let hierarchy = new cv.Mat();

        cv.cvtColor(src, grayscale, cv.COLOR_RGBA2GRAY, 0);

        // Enhance contrast
        let clahe = new cv.CLAHE();
        clahe.apply(grayscale, grayscale);

        cv.Canny(grayscale, edges, 50, 150, 3, false);
        cv.adaptiveThreshold(grayscale, adaptiveThresh, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, 11, 2);

        // Combine results
        cv.bitwise_or(edges, adaptiveThresh, combined);

        let M = cv.Mat.ones(5, 5, cv.CV_8U);
        cv.dilate(combined, dilated, M);

        cv.findContours(dilated, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);


        let labels = [];
        let fields = [];
        for (let i = 0; i < contours.size(); i++) {
            let contour = contours.get(i);
            let rect = cv.boundingRect(contour);

            if (rect.width > 10 && rect.height > 5) {
                console.log("rect me");
                let point1 = new cv.Point(rect.x, rect.y);
                let point2 = new cv.Point(rect.x + rect.width, rect.y + rect.height);
                cv.rectangle(src, point1, point2, [255, 0, 0, 255], 2);

                fields.push(rect);

                // cutout part of image to get text
                const canvas = createCanvas(image.width, image.height);
                const ctx = canvas.getContext('2d');
                ctx.drawImage(image, 0, 0);
                let cutout = ctx.getImageData(rect.x, rect.y, rect.width, rect.height);

                let newCanvas = createCanvas(cutout.width, cutout.height);
                const newCtx = newCanvas.getContext('2d');
                newCtx.putImageData(cutout, 0, 0);

                //resize if smaller than 200px
                if (newCanvas.width < 200) {
                    const resizeFactor = 200 / newCanvas.width;
                    const newWidth = newCanvas.width * resizeFactor;
                    const newHeight = newCanvas.height * resizeFactor;
                    const newCanvas2 = createCanvas(newWidth, newHeight);
                    const newCtx2 = newCanvas2.getContext('2d');
                    newCtx2.drawImage(newCanvas, 0, 0, newWidth, newHeight);
                    newCanvas = newCanvas2;
                }

                let buffer = newCanvas.toBuffer('image/jpeg');
                writeFileSync('public/pici/output' + i + '.jpg', buffer);

                let labelText = await Tesseract.recognize(buffer, undefined);
                console.log("label me", labelText.data.text);
            }
        }

        let associations = [];
        const canvas = createCanvas(src.cols, src.rows);
        cv.imshow(canvas, src);
        writeFileSync('public/output.jpg', canvas.toBuffer('image/jpeg'));

        for (let label of labels) {
            for (let field of fields) {
                if (Math.abs((label.rect.x + label.rect.width) - field.x) < 30 &&
                    label.rect.y < field.y + field.height &&
                    field.y < label.rect.y + label.rect.height) {
                    associations.push({ labelText: label.text, fieldRect: field });
                    break;
                }
            }
        }

        src.delete();
        grayscale.delete();
        contours.delete();
        hierarchy.delete();

        return associations;
    } catch (e) {
        console.error(e)
    }
}

function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}


async function test() {
    await sleep(2200);
    try {
        console.log(cv.getBuildInformation())
    } catch (e) {
        console.log(e);
    }
}

test().then(() => {
    processImage('public/todotest.png').then(result => {
        console.log(result);
        // for (let association of result) {
        //     console.log(`Field at ${JSON.stringify(association.fieldRect)} is labeled as '${association.labelText.trim()}'`);
        // }
    });
});


